// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Check if a instruction or C instruction. Sets both aInstruction and cInstruction outputs to their appropriate values.
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    // Takes care of selecting A (op-code = 0) instruction vs C instruction (op-code = 1)
    // Loads either ALU output, if opcode is A (1) then load the instruction since it represents an address
    // If opcode is 0 then load the ALU out since it is a C instruction.

    Mux16(a=instruction, b=ALUOut , sel=instruction[15], out=newAValue);

    // Whether or not to load the A register
    And(a=cInstruction, b=instruction[5], out=calcA);
    Or(a=aInstruction, b=calcA, out=loadA);
    ARegister(in=newAValue, load=loadA, out=Aout, out[0..14]=addressM);

    // Whether or not to load the D register.
    And(a=instruction[4], b=cInstruction, out=loadD);
    DRegister(in=ALUOut , load=loadD , out=DReg);

    // Takes output from a and inM and decides using value a, whether The ALU will operate on the A input or the M input (ie pointer vs stored value)
    Mux16(a=Aout , b=inM , sel=instruction[12] , out=Mux2Out );

    // ALU loads the c components of the instruction (msb -> lsb)
    ALU(x=DReg, y=Mux2Out, zx=instruction[11] ,nx= instruction[10] , zy=instruction[9], ny=instruction[8] , f=instruction[7] ,no=instruction[6] , out=outM, out=ALUOut , zr=zero ,ng=negative);

    // Check to see if <0 and if j1 is selected
    And(a=negative, b=instruction[2] , out=lessThanZero);

    // Check if =0 and j2 selected.
    And(a=zero , b=instruction[1] , out=equalToZero);

    //Check if positive number
    Not(in=zero, out=notZero);
    Not(in=negative, out=pos);
    And(a=notZero, b=pos, out=positive);

    //Check if +ve and j3 selected
    And(a=positive , b=instruction[0], out=greaterThanZero);

    // Check if any of the jump conditions are fulfilled
    Or(a=lessThanZero, b=equalToZero, out=lessThanOrEqual);
    Or(a=lessThanOrEqual, b=greaterThanZero, out=PCLoader);

    //Check if should jump (PC loader) and if following a C-instruction
    And(a=cInstruction, b=PCLoader, out=jumpInstruct);

    //Decide if should jump or increment - if no jump, then increment.
    //Not(in=jumpInstruct, out=increment);
    PC(in=Aout, load=jumpInstruct, inc=true, reset=reset , out[0..14]=pc);

    // Select whether M should be written (based on d instruction & A instruction)
    And(a=instruction[3], b=cInstruction, out=writeM);
}